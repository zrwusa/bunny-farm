# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserPreference {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  receiveNotifications: Boolean!
  receiveEmails: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Category {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  parent: Category
  subcategories: [Category!]!
  products: [Product!]!
}

type Brand {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  products: [Product!]!
}

type ProductImage {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  position: Float
  product: Product!
}

type ProductReview {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  rating: Int!
  comment: String
  product: Product
  sku: SKU
}

type Product {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: JSONObject
  category: Category
  brand: Brand
  skus: [SKU!]!
  images: [ProductImage!]!
  reviews: [ProductReview!]!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Warehouse {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  location: String!
  inventories: [Inventory!]!
}

type Inventory {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Float!
  sku: SKU!
  warehouse: Warehouse!
}

type ProductPrice {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  price: Float!
  validFrom: DateTime
  validTo: DateTime
  sku: SKU!
}

type InventoryRecord {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sku: SKU!
  changeQuantity: Int!
  type: InventoryType!
  reason: String
  order: Order
}

enum InventoryType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
}

type SkuImage {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  position: Float
  sku: SKU!
}

type SKU {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  color: String!
  size: String!
  skuCode: String
  prices: [ProductPrice!]!
  images: [SkuImage!]!
  product: Product!
  inventories: [Inventory!]!
  inventoryRecords: [InventoryRecord!]!
  reviews: [ProductReview!]!
}

type OrderItem {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  sku: SKU!
  quantity: Int!

  """The total price of the current quantity of products"""
  price: Float!
}

type Payment {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  status: PaymentStatus!
  paymentMethod: PaymentMethod!
  url: String
  amount: Float!
  paymentTime: DateTime
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  OTHER
}

type Order {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  items: [OrderItem!]
  payments: [Payment!]
  status: OrderStatus!
  paymentStatus: PaymentStatus!
  shippingStatus: ShippingStatus!
  paymentMethod: PaymentMethod!
  totalPrice: Float!
}

enum OrderStatus {
  PENDING
  PAID
  AWAITING_SHIPMENT
  SHIPPED
  COMPLETED
  CANCELLED
  REFUNDING
  REFUNDED
  RETURNING
  RETURNED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
}

type UserProfile {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  avatarUrl: String
  bio: String
  displayName: String
  birthDate: DateTime
  gender: String
}

type UserAddress {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  recipientName: String!
  phone: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  postalCode: String!
  country: String!
  isDefault: Boolean!
}

type UserPaymentMethod {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  paymentType: String!
  maskedCardNumber: String!
  cardExpiry: DateTime
  provider: String
}

type CartItem {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  cart: Cart
  productId: String!
  skuId: String!
  quantity: Int!
  selected: Boolean!
}

type Cart {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  clientCartId: String!
  deviceType: DeviceType!
  items: [CartItem!]!
}

enum DeviceType {
  WEB
  MOBILE_WEB
  APP
  MOBILE_APP
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  providerId: String
  preference: UserPreference
  profile: UserProfile
  addresses: [UserAddress!]
  paymentMethods: [UserPaymentMethod!]
  orders: [Order!]
  reviews: [ProductReview!]
  carts: [Cart!]
}

type EnrichedCartItem {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  cart: Cart
  productId: String!
  skuId: String!
  quantity: Int!
  selected: Boolean!
  product: Product
  sku: SKU
}

type CachedCart {
  id: ID!
  user: User
  clientCartId: String
  deviceType: DeviceType!
  items: [EnrichedCartItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type App {
  message: String!
}

type Shipment {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  status: ShipmentStatus!
  carrier: Carrier!
  trackingNumber: String
  estimatedDelivery: DateTime
  shippedAt: DateTime
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  FAILED
  RETURNED
}

enum Carrier {
  DHL
  FEDEX
  UPS
  USPS
  ARAMEX
  LOCAL_COURIER
}

type TokenOutput {
  accessToken: String!
  refreshToken: String!
}

type Geometry {
  lat: Float!
  lng: Float!
}

type Bounds {
  northeast: Geometry!
  southwest: Geometry!
}

type Components {
  city: String
  suburb: String
  road: String
  house_number: String
  postcode: String
  state: String
  state_code: String
  country: String
  country_code: String
  continent: String
}

type Timezone {
  name: String!
  offset_sec: Int!
  offset_string: String!
  short_name: String!
}

type Currency {
  name: String!
  iso_code: String!
  symbol: String!
  subunit_to_unit: Int!
}

type RoadInfo {
  road: String!
  drive_on: String!
  speed_in: String!
}

type Annotations {
  timezone: Timezone!
  callingcode: Int!
  currency: Currency!
  roadinfo: RoadInfo!
  flag: String!
  geohash: String!
  qibla: Float!
}

type PlaceGeoDetail {
  formatted: String!
  geometry: Geometry!
  bounds: Bounds!
  components: Components!
  annotations: Annotations!
  confidence: Int!
}

type Query {
  ping: App!
  user(id: String!): User
  users: [User!]!
  me: User!
  myAddresses: [UserAddress!]!
  product(id: String!): Product
  products: [Product!]!
  searchProducts(keyword: String!): [Product!]!
  suggestProductNames(input: String!): [String!]!
  orders(filterOrderInput: FilterOrderInput!): [Order!]!
  order(id: String!): Order!
  cart(clientCartId: String): CachedCart!
  selectedCartItems(clientCartId: String): [EnrichedCartItem!]!
  payments: [Payment!]!
  payment(id: Int!): Payment!
  shipments: [Shipment!]!
  shipment(id: Int!): Shipment!
  placeDetail(address: String!): PlaceGeoDetail
}

input FilterOrderInput {
  page: Float! = 1
  pageSize: Float! = 10
  status: String
  startDate: DateTime
  endDate: DateTime
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  createUserSettings(createUserPreferenceInput: CreateUserPreferenceInput!): UserPreference!
  createProduct(createProductInput: CreateProductInput!): Product!
  publishProduct(publishProductInput: PublishProductInput!): Product!
  bulkIndexProducts: Boolean!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  placeOrder(input: PlaceOrderInput!): Order!
  addToCart(addItemToCartInput: AddItemToCartInput!): CachedCart!
  updateItemQuantity(updateItemQuantityInput: UpdateItemQuantityInput!): CachedCart!
  toggleItemSelection(toggleItemSelection: ToggleItemSelectionInput!, clientCartId: String): CachedCart!
  removeItems(removeItemsInput: RemoveItemsInput!): CachedCart!
  clearCart(clientCartId: String): CachedCart!
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!
  confirmPayment(paymentId: String!, status: String!): Payment!
  updatePayment(updatePaymentInput: UpdatePaymentInput!): Payment!
  removePayment(id: Int!): Payment!
  createPaymentIntent(createPaymentIntentInput: CreatePaymentIntentInput!): String!
  createCheckoutSession: String!
  createShipment(createShipmentInput: CreateShipmentInput!): Shipment!
  updateShipment(updateShipmentInput: UpdateShipmentInput!): Shipment!
  removeShipment(id: Int!): Shipment!
  login(input: LoginInput!): TokenOutput!
  refreshToken(userId: String!, refreshToken: String!): TokenOutput!
  logout: Boolean!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input CreateUserPreferenceInput {
  userId: String!
  receiveNotifications: Boolean = false
  receiveEmails: Boolean = false
}

input CreateProductInput {
  name: String!
  brandId: String!
  price: Float!
  description: JSONObject
}

input PublishProductInput {
  name: String!
  description: JSONObject
  brand: BrandInput!
  category: CategoryInput!
  images: [ImageInput!]!
  skus: [SkuInput!]!
}

input BrandInput {
  id: String
  name: String
}

input CategoryInput {
  id: String
  name: String
}

input ImageInput {
  url: String!
  position: Float!
}

input SkuInput {
  size: String!
  sku: String!
  color: String!
  prices: [PriceInput!]
  images: [SkuImageInput!]
  inventories: [InventoryInput!]
  inventoryRecords: [InventoryRecordInput!]
}

input PriceInput {
  price: Float!
  validFrom: DateTime!
  validTo: DateTime!
}

input SkuImageInput {
  url: String!
  position: Float!
}

input InventoryInput {
  quantity: Float!
  warehouse: WarehouseInput!
}

input WarehouseInput {
  id: String
  name: String
  location: String
}

input InventoryRecordInput {
  changeQuantity: Float!
  type: String!
}

input CreateOrderInput {
  """User Id"""
  userId: String!
  items: [OrderItemInput!]!
}

input OrderItemInput {
  """Sku Ids"""
  skuId: String!

  """Quantity of the product(s)"""
  quantity: Int!
}

input PlaceOrderInput {
  addressId: ID!
  paymentMethod: PaymentMethod!
  items: [CartItemInput!]!
}

input CartItemInput {
  skuId: String!
  productId: String!
  quantity: Int!
  selected: Boolean!
}

input AddItemToCartInput {
  item: CartItemInput!
  clientCartId: String
}

input UpdateItemQuantityInput {
  skuId: String!
  quantity: Int!
  clientCartId: String
}

input ToggleItemSelectionInput {
  skuId: String!
  selected: Boolean!
  clientCartId: String
}

input RemoveItemsInput {
  skuIds: [String!]!
  clientCartId: String
}

input CreatePaymentInput {
  """Order ID"""
  orderId: String!
}

input UpdatePaymentInput {
  """Order ID"""
  orderId: String
  id: Int!
}

input CreatePaymentIntentInput {
  """amount of cents"""
  amountOfCents: Int!

  """currency type, eg. NZD"""
  currency: String!
}

input CreateShipmentInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateShipmentInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input LoginInput {
  type: String!
  email: String
  password: String
  oauthToken: String
}